<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 2019-10-21 -->
	<!-- jedis pool 配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
		<property name="maxTotal" value="256" />
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="50" />
		<!-- 每次释放连接的最大数目 -->
		<property name="numTestsPerEvictionRun" value="512" />
		<!-- 释放连接的扫描间隔(毫秒)-->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 释放连接最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="-1" />
		<!-- 连接空闲多久后释放,当空闲时间>该值且空闲连接>最大空闲连接数时直接释放 -->
		<property name="softMinEvictableIdleTimeMillis" value="10000" />
		<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
		<property name="maxWaitMillis" value="1500" />
		<!-- 在获取连接的时候检查有效性,默认false -->
		<property name="testOnBorrow" value="true" />
		<!-- 在空闲时检查有效性,默认false -->
		<property name="testWhileIdle" value="true" />
		<!-- 当调用返回时检查有效性,默认false -->
		<property name="testOnReturn" value="false" />
		<!-- 是否开启jmx监控,默认为true,可以通过jconsole等工具监控连接池 -->
		<property name="jmxEnabled" value="true" />
		<!-- 使用默认pool -->
		<property name="jmxNamePrefix" value="pool" />
		<!-- 连接耗尽时是否阻塞,false报异常,ture阻塞直到超时,默认true-->
		<property name="blockWhenExhausted" value="false" />
	</bean>
	<!-- 序列化 -->
	<bean id="serializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

</beans>